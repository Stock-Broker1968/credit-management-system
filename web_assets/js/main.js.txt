main.js
// JavaScript principal del Sistema de Gestión de Crédito

// Esperar a que el DOM esté listo
document.addEventListener('DOMContentLoaded', function() {
    console.log('Sistema de Gestión de Crédito - Inicializado');
    
    // Inicializar componentes
    initializeTooltips();
    initializeAlerts();
    initializeCharts();
    
    // Agregar animaciones
    addFadeInAnimations();
});

// Inicializar tooltips de Bootstrap
function initializeTooltips() {
    var tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
    var tooltipList = tooltipTriggerList.map(function (tooltipTriggerEl) {
        return new bootstrap.Tooltip(tooltipTriggerEl);
    });
}

// Manejo de alertas
function initializeAlerts() {
    // Auto-cerrar alertas después de 5 segundos
    const alerts = document.querySelectorAll('.alert:not(.alert-permanent)');
    alerts.forEach(function(alert) {
        setTimeout(function() {
            if (alert && alert.parentNode) {
                const bsAlert = new bootstrap.Alert(alert);
                bsAlert.close();
            }
        }, 5000);
    });
}

// Inicializar gráficos básicos (se expandirá con módulos específicos)
function initializeCharts() {
    // Placeholder para gráficos futuros
    console.log('Preparando área de gráficos...');
}

// Agregar animaciones de entrada
function addFadeInAnimations() {
    const cards = document.querySelectorAll('.card');
    cards.forEach((card, index) => {
        card.style.opacity = '0';
        card.style.transform = 'translateY(20px)';
        
        setTimeout(() => {
            card.style.transition = 'opacity 0.6s ease, transform 0.6s ease';
            card.style.opacity = '1';
            card.style.transform = 'translateY(0)';
        }, index * 100);
    });
}

// Función para mostrar alertas personalizadas
function showAlert(message, type = 'info') {
    const alertContainer = document.createElement('div');
    alertContainer.className = `alert alert-${type} alert-dismissible fade show`;
    alertContainer.innerHTML = `
        ${message}
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;
    
    // Insertar al inicio del contenido principal
    const main = document.querySelector('main');
    main.insertBefore(alertContainer, main.firstChild);
    
    // Auto-cerrar después de 5 segundos
    setTimeout(() => {
        if (alertContainer && alertContainer.parentNode) {
            const bsAlert = new bootstrap.Alert(alertContainer);
            bsAlert.close();
        }
    }, 5000);
}

// Función para validar formularios
function validateForm(formId) {
    const form = document.getElementById(formId);
    if (!form) return false;
    
    let isValid = true;
    const requiredFields = form.querySelectorAll('[required]');
    
    requiredFields.forEach(field => {
        if (!field.value.trim()) {
            field.classList.add('is-invalid');
            isValid = false;
        } else {
            field.classList.remove('is-invalid');
            field.classList.add('is-valid');
        }
    });
    
    return isValid;
}

// Función para formatear números como moneda
function formatCurrency(amount) {
    return new Intl.NumberFormat('es-MX', {
        style: 'currency',
        currency: 'MXN'
    }).format(amount);
}

// Función para calcular score de riesgo básico
function calculateBasicRiskScore(income, debt, creditHistory) {
    let score = 500; // Score base
    
    // Aumentar por ingresos
    if (income > 50000) score += 100;
    else if (income > 30000) score += 50;
    
    // Disminuir por deuda
    const debtRatio = debt / income;
    if (debtRatio > 0.5) score -= 100;
    else if (debtRatio > 0.3) score -= 50;
    
    // Ajustar por historial crediticio
    if (creditHistory === 'excellent') score += 150;
    else if (creditHistory === 'good') score += 100;
    else if (creditHistory === 'fair') score += 50;
    else if (creditHistory === 'poor') score -= 100;
    
    // Mantener en rango 300-850
    return Math.max(300, Math.min(850, score));
}

// Función para determinar nivel de riesgo
function getRiskLevel(score) {
    if (score >= 750) return { level: 'low', text: 'Bajo', class: 'risk-low' };
    else if (score >= 650) return { level: 'medium', text: 'Medio', class: 'risk-medium' };
    else return { level: 'high', text: 'Alto', class: 'risk-high' };
}

// API helpers
const API = {
    // Crear nuevo cliente
    createCustomer: async function(customerData) {
        try {
            const response = await fetch('/api/customer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(customerData)
            });
            
            return await response.json();
        } catch (error) {
            console.error('Error creando cliente:', error);
            showAlert('Error al crear cliente', 'danger');
            return null;
        }
    },
    
    // Crear solicitud de crédito
    createCreditApplication: async function(applicationData) {
        try {
            const response = await fetch('/api/credit-application', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(applicationData)
            });
            
            return await response.json();
        } catch (error) {
            console.error('Error creando solicitud:', error);
            showAlert('Error al crear solicitud de crédito', 'danger');
            return null;
        }
    },
    
    // Obtener score de riesgo
    getRiskScore: async function(customerId) {
        try {
            const response = await fetch(`/api/risk-score/${customerId}`);
            return await response.json();
        } catch (error) {
            console.error('Error obteniendo score de riesgo:', error);
            showAlert('Error al calcular score de riesgo', 'danger');
            return null;
        }
    }
};

// Utilidades para manejo de datos
const DataUtils = {
    // Validar CURP mexicana
    validateCURP: function(curp) {
        const curpRegex = /^[A-Z]{1}[AEIOU]{1}[A-Z]{2}[0-9]{2}(0[1-9]|1[0-2])(0[1-9]|1[0-9]|2[0-9]|3[0-1])[HM]{1}(AS|BC|BS|CC|CS|CH|CL|CM|DF|DG|GT|GR|HG|JC|MC|MN|MS|NT|NL|OC|PL|QT|QR|SP|SL|SR|TC|TS|TL|VZ|YN|ZS|NE)[B-DF-HJ-NP-TV-Z]{3}[0-9A-Z]{1}$/;
        return curpRegex.test(curp);
    },
    
    // Validar RFC mexicano
    validateRFC: function(rfc) {
        const rfcRegex = /^[A-ZÑ&]{3,4}[0-9]{6}[A-Z0-9]{3}$/;
        return rfcRegex.test(rfc);
    },
    
    // Formatear fecha para input
    formatDateForInput: function(date) {
        return date.toISOString().split('T')[0];
    },
    
    // Calcular edad
    calculateAge: function(birthDate) {
        const today = new Date();
        const birth = new Date(birthDate);
        let age = today.getFullYear() - birth.getFullYear();
        const monthDiff = today.getMonth() - birth.getMonth();
        
        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
            age--;
        }
        
        return age;
    }
};

// Utilidades específicas para riesgo crediticio
const RiskUtils = {
    // Calcular ratio deuda-ingreso
    calculateDebtToIncomeRatio: function(totalDebt, monthlyIncome) {
        if (monthlyIncome <= 0) return 0;
        return (totalDebt / monthlyIncome) * 100;
    },
    
    // Determinar capacidad de pago
    calculatePaymentCapacity: function(monthlyIncome, monthlyExpenses) {
        const availableIncome = monthlyIncome - monthlyExpenses;
        const maxPayment = availableIncome * 0.3; // Máximo 30% del ingreso disponible
        return Math.max(0, maxPayment);
    },
    
    // Evaluar estabilidad laboral
    evaluateJobStability: function(jobStartDate, jobType) {
        const today = new Date();
        const startDate = new Date(jobStartDate);
        const monthsWorked = (today - startDate) / (1000 * 60 * 60 * 24 * 30);
        
        let stabilityScore = 0;
        
        // Puntuación por tiempo en el trabajo
        if (monthsWorked >= 24) stabilityScore += 100;
        else if (monthsWorked >= 12) stabilityScore += 75;
        else if (monthsWorked >= 6) stabilityScore += 50;
        else stabilityScore += 25;
        
        // Puntuación por tipo de empleo
        switch (jobType) {
            case 'permanent':
                stabilityScore += 50;
                break;
            case 'contract':
                stabilityScore += 30;
                break;
            case 'freelance':
                stabilityScore += 10;
                break;
            default:
                stabilityScore += 0;
        }
        
        return Math.min(150, stabilityScore);
    }
};

// Exportar funciones globales
window.CreditSystem = {
    API,
    DataUtils,
    RiskUtils,
    showAlert,
    validateForm,
    formatCurrency,
    calculateBasicRiskScore,
    getRiskLevel
};